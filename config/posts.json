{
  "posts": [
    {
      "content": "\n# 🪴 全局加载字体\n\n## 1. 导入字体文件\n\n准备好要使用的字体文件，并且将它导入至你的 XCode Project 中。\n\n> Tips：一定要勾选 `Copy items if needed` ，不勾选的话只会进行位置引用。\n\n![](https://seaony.github.io/post-images/1679953001044.png)\n\n---\n\n## 2. 修改 Info.plist\n\n打开你的 `Info.plist` 文件，新增一项：`Fonts provided by application`。\n\n对应的值即为你的字体文件的名称 (不需要带 Group 前缀，需要带文件后缀)。\n\n![](https://seaony.github.io/post-images/1679953202754.png)\n\n---\n\n## 3. 添加资源文件\n\n确保你的字体文件已添加至 `TARGETS` - `Build Phases` - `Copy Bundle Resources` 中。\n\n> 一般导入字体文件后会自动添加，但也会有意外 :-)\n\n![](https://seaony.github.io/post-images/1679953445072.png)\n\n---\n\n## 4. 确认导入成功\n\n运行这段代码即可打印出所有可用字体，检查是否导入成功。\n\n```swift\nfor fontFamily in UIFont.familyNames {\n    print(fontFamily)\n\n    for font in UIFont.fontNames(forFamilyName: fontFamily) {\n        print(fontFamily + \": \" + font)\n    }\n}\n```\n\n---\n\n# 🧐 覆盖默认字体\n\n如果你需要全局都显示某个字体，那么就需要这样设置。\n\n如果不这样做，那么你需要在每一个显示文本的地方都指定 `FontName`。\n\n> Tips：使用覆盖 UIFont 的方式设置全局字体会导致键盘等系统 UI 字体也被替换。\n\n## 1. 创建 UIFont 拓展\n\n在 `Extension` Group 下创建 `UIFontExtension` 文件拓展 UIFont 类。\n\n> 当然，你也可以放在别的位置，使用其他名称 🫠。\n\n```swift\nimport UIKit\n\n// MARK: - AppFontName\nstruct AppFontName {\n    static let italic = \"Montserrat-Medium\"\n    static let regular = \"Montserrat-Medium\"\n    static let semibold = \"Montserrat-SemiBold\"\n    static let bold = \"Montserrat-Bold\"\n    static let heavy = \"Montserrat-ExtraBold\"\n    static let black = \"Montserrat-Black\"\n}\n\n// MARK: - UIFontDescriptor.AttributeName\nextension UIFontDescriptor.AttributeName {\n\n    /// NSCTFontUIUsageAttribute\n    static let nsctFontUIUsage = UIFontDescriptor.AttributeName(rawValue: \"NSCTFontUIUsageAttribute\")\n\n}\n\n/// 字体扩展\nextension UIFont {\n\n    /// 是否已经替换过\n    static var isOverrided: Bool = false\n\n    // 重写系统字体\n    @objc class func mySystemFont(ofSize size: CGFloat, weight: UIFont.Weight) -> UIFont {\n        switch weight {\n        case .ultraLight, .thin, .light, .regular, .medium:\n            return UIFont(name: AppFontName.regular, size: size)!\n        case .semibold:\n            return UIFont(name: AppFontName.semibold, size: size)!\n        case .bold:\n            return UIFont(name: AppFontName.bold, size: size)!\n        case .heavy:\n            return UIFont(name: AppFontName.heavy, size: size)!\n        case .black:\n            return UIFont(name: AppFontName.black, size: size)!\n        default:\n            return UIFont(name: AppFontName.regular, size: size)!\n        }\n    }\n\n    // 重写粗体字体\n    @objc class func myBoldSystemFont(ofSize size: CGFloat) -> UIFont {\n        return UIFont(name: AppFontName.bold, size: size)!\n    }\n\n    // 重写斜体字体\n    @objc class func myItalicSystemFont(ofSize size: CGFloat) -> UIFont {\n        return UIFont(name: AppFontName.italic, size: size)!\n    }\n\n    // 重写字体的编码方法\n    @objc convenience init(myCoder aDecoder: NSCoder) {\n        guard\n                let fontDescriptor = aDecoder.decodeObject(forKey: \"UIFontDescriptor\") as? UIFontDescriptor,\n                let fontAttribute = fontDescriptor.fontAttributes[.nsctFontUIUsage] as? String\n        else {\n            self.init(myCoder: aDecoder)\n            return\n        }\n        var fontName = \"\"\n        switch fontAttribute {\n        case \"CTFontRegularUsage\":\n            fontName = AppFontName.regular\n        case \"CTFontEmphasizedUsage\", \"CTFontBoldUsage\":\n            fontName = AppFontName.bold\n        case \"CTFontObliqueUsage\":\n            fontName = AppFontName.italic\n        default:\n            fontName = AppFontName.regular\n        }\n        self.init(name: fontName, size: fontDescriptor.pointSize)!\n    }\n\n    /// 替换系统字体\n    class func overrideInitialize() {\n\n        // 避免 method swizzling 运行两次\n        guard self == UIFont.self, !isOverrided else {\n            return\n        }\n\n        // 避免 method swizzling 运行两次并恢复到原始初始化函数\n        isOverrided = true\n\n        // 替换系统字体\n        if let systemFontMethod = class_getClassMethod(self, #selector(systemFont(ofSize:weight:))),\n           let mySystemFontMethod = class_getClassMethod(self, #selector(mySystemFont(ofSize:weight:))) {\n            method_exchangeImplementations(systemFontMethod, mySystemFontMethod)\n        }\n\n        // 替换粗体字体\n        if let boldSystemFontMethod = class_getClassMethod(self, #selector(boldSystemFont(ofSize:))),\n           let myBoldSystemFontMethod = class_getClassMethod(self, #selector(myBoldSystemFont(ofSize:))) {\n            method_exchangeImplementations(boldSystemFontMethod, myBoldSystemFontMethod)\n        }\n\n        // 替换斜体字体\n        if let italicSystemFontMethod = class_getClassMethod(self, #selector(italicSystemFont(ofSize:))),\n           let myItalicSystemFontMethod = class_getClassMethod(self, #selector(myItalicSystemFont(ofSize:))) {\n            method_exchangeImplementations(italicSystemFontMethod, myItalicSystemFontMethod)\n        }\n\n        // Trick to get over the lack of UIFont.init(coder:))\n        if let initCoderMethod = class_getInstanceMethod(self, #selector(UIFontDescriptor.init(coder:))),\n           let myInitCoderMethod = class_getInstanceMethod(self, #selector(UIFont.init(myCoder:))) {\n            method_exchangeImplementations(initCoderMethod, myInitCoderMethod)\n        }\n    }\n}\n```\n\n---\n\n## 2. 覆盖初始化方法\n\n在你的 `AppDelegate` 文件中注册如下方法，覆盖 UIFont 初始化。\n\n```swift\noverride init() {\n    super.init()\n    UIFont.overrideInitialize()\n}\n```\n\n---\n\n# 🫠 Reference Links\n\n- [Set default custom font for entire app — Swift 5](https://medium.com/fabcoding/set-default-custom-font-for-entire-app-swift-5-55709e36e6f3)\n\n- [Setting up custom font style for Text, Labels and Buttons globally in iOS Application — iOS Swift](https://medium.com/@arunvaishy1007/setting-up-custom-font-style-for-text-labels-and-buttons-globally-in-ios-application-ios-swift-17b08317c026)\n\n\n",
      "data": {
        "title": "👨‍💻 iOS 项目中使用自定义字体",
        "date": "2023-03-28 05:33:25",
        "tags": [
          "Swift",
          "iOS"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/ios-xiang-mu-zhong-dao-ru-zi-ding-yi-zi-ti.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "ios-xiang-mu-zhong-dao-ru-zi-ding-yi-zi-ti"
    },
    {
      "content": "\n# 🧐 1. 移除 Storyboard\n\n没什么好说的，既然是纯代码布局，那么 Storyboard 文件就不需要了。\n\n```shell\nrm ./Main.storyboard\n```\n\n---\n\n# 👨‍💻 2. 修改 Main Interface\n\n因为 Xcode 版本更新，不同的版本会有不同的处理方案。\n\n-  Xcode Version < **14.0**\n\n    清空 `General` - `Deployment Info` - `Main Interface`。\n\n-  Xcode Version >= **14.0**\n\n    清空 `Build Setting` - `UIKit Main Storyboard File Base Name`。\n\n\n---\n\n# 🪴 3. 设置默认 View\n\n在你的 `AppDelegate.swift` - `application` 中添加如下代码。\n\n```swift\n// 设置默认显示的界面\nlet controller = YourDefaultViewController()\n        \nself.window = UIWindow(frame: UIScreen.main.bounds)\nwindow!.rootViewController = UINavigationController(rootViewController: controller)\nwindow?.makeKeyAndVisible()\n```",
      "data": {
        "title": "🪴 Xcode 中创建纯代码布局项目",
        "date": "2023-03-23 00:03:28",
        "tags": [
          "Swift"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/hello-gridea.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "hello-gridea"
    },
    {
      "content": "\n<!-- more -->\n\n> We used to look up at the sky and wonder at our place in the stars, now we just look down and worry about our place in the dirt. <div style=\"text-align: right;\">- 《Interstellar》</div>\n\n<!-- more -->\n\n\n\n## 🏠 Who am I?\n\n\n---\n\n## ⚒️ Digital Nomad\n\n> 如果有一天，我们终将会被淘汰，那么我希望淘汰我的是自己。或者说，以另一种方式存在的另一个 “我” 🫠。可能这一天很遥远，也可能，它就在明天。\n\n#### 👨‍💻 Development:\n\n- [JetBrains](https://www.jetbrains.com/) (The best IDE in the world 😻)\n\n- [Hyper](https://hyper.is/) (A terminal built on web technologies. 🫠)\n\n- [TablePlus](https://tableplus.com/) (Database management made easy 🍭)\n\n- [PHP Monitor](https://phpmon.app/) (Monitor and manage your PHP installations\nwith ease. 🧐)\n\n#### ⏳ Save Time:\n\n- [Raycast](https://www.raycast.com/) (Supercharged productivity 🌈)\n\n- [Things3](https://culturedcode.com/things/) (Simply Powerful，and Beautiful 🌱)\n\n- [1Password](https://1password.com/zh-cn) (The world’s most-loved password manager 👻)\n\n#### 🍯 Other Tools\n\n- [ClashX](https://github.com/yichengchen/clashX) (Over this wall 🍂)\n\n- [IINA](https://cleanshot.com/)  (We always have something to watch.)\n\n- [CleanShotX](https://cleanshot.com/)  (Capture your Mac’s screen like a pro. 😲)\n\n\n\n#### 💭 I'm Alive\n\n- [RunCat](https://kyome.io/runcat/index.html?lang=en) (Cat living in the menubar. 🐈)\n\n---\n\n## 🫠 Contact\n\n> Tips：I don't like idiots，Please be careful 🤧\n\n- WeChat (Base64)：`Y2FsaWJ1b3Jz`\n\n- Email (Base64)：`c2Vhb255QG91dGxvb2suY29t`\n\n\n",
      "data": {
        "title": "💭 Code in Life, Think in Death。",
        "date": "2019-01-25 19:09:48",
        "tags": [],
        "published": true,
        "hideInList": true,
        "feature": "/post-images/about.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "about"
    }
  ],
  "tags": [
    {
      "name": "iOS",
      "slug": "KiEwulagm",
      "used": true
    },
    {
      "name": "Swift",
      "slug": "UTRWV5Qzl",
      "used": true
    },
    {
      "name": "Gridea",
      "slug": "6r9fOKFTW",
      "used": false
    }
  ],
  "menus": [
    {
      "link": "/",
      "name": "Home",
      "openType": "Internal"
    },
    {
      "link": "/archives",
      "name": "Archives",
      "openType": "Internal"
    },
    {
      "link": "/tags",
      "name": "Tags",
      "openType": "Internal"
    },
    {
      "link": "/post/about",
      "name": "About",
      "openType": "Internal"
    }
  ]
}