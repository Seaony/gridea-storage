{
  "posts": [
    {
      "content": "\n## 🫠 什么是声调\n\n日语词语中的各个音节之间存在的高低、轻重的配置关系叫做**声调**（アクセント），声调可以用来**区分同音词**。与中文的四声声调不同，日语是**高低型声调**，发音是“由低到高”“由高到低”的状态，单词中某些音节为高音，某些音节为低音。\n\n---\n\n## 🧶 声调规则\n\n1. <u>**第一个音与第二音不是同音**</u>\n\n2. <u>**出现降音就不会升回去**</u>\n\n3. <u>**在第几个音出现，就是几型**</u>\n\n---\n\n## 🪴 声调类型\n\n日语的声调可以分为平板型和起伏型，起伏型又分为头高型、中高型、尾高型。\n\n1. **平板型**\n   \n    第一个音节低，后面音都高。后续助词为高音，这种类型中由三至四个音节组成的词较多。\n\n2. <u>**头高型**</u>\n   \n    第一个音节高，后面音都低。\n\n3. <u>**中高型**</u>\n    \n    第一个和最后一个音节低，中间为高音（分全为高音节和部分为高音节）。后续助词为低音这种类型中没有一个或两个音节的词，三个音节以上才会出现。\n\n4. <u>**尾高型**</u>\n\n    第一个音节低，第二个音开始都为高音节。后续助词为低音。\n\n\n> 在日语中一个假名代表一拍，包括表示清音、浊音、半浊音、促音っ、拨音ん以及长音的假名，但是不包括组成拗音中的小“ゃ”、“ゅ”和“ょ”，即一个拗音整体上作为一个音拍来看待，如“きゃ”是一个音拍，而不是两拍。而“きょう”和“そう”等长音则是两拍。\n\n\n\n",
      "data": {
        "title": "🚍 日语声调 - [日语学习笔记]",
        "date": "2023-04-20 22:17:56",
        "tags": [
          "日本語"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/ri-yu-sheng-diao-ri-yu-xue-xi-bi-ji.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "ri-yu-sheng-diao-ri-yu-xue-xi-bi-ji"
    },
    {
      "content": "\n## 😶‍🌫️ 创建文件\n\n在项目根目录下右键选择 `New File`，创建一个名为 `Localizable.strings` 的 Strings File。\n\n![](https://seaony.github.io/post-images/1681668230963.png)\n\n在 `Localizable.strings` 中添加你的多语言文本，它看起来就像这样。\n\n```swift\n// 示例文本\nExampleMessage = \"Example Message\";\n```\n## 🪴 使用文本\n\n接下来，你可以像这样使用它：\n```swift\n/// - NSlocalizedString\nNSlocalizedString(\"ExampleMessage\", comment: \"\")\n // Example Message\n\n /// - R.swift\n R.string.localizable.exampleMessage()\n  // Example Message\n```\n---\n\n## 👨‍💻 启用国际化\n\n选中项目 `Project Info`，在 `Localizations` 中点击加号，添加你想要支持的语言。\n\n![](https://seaony.github.io/post-images/1681668335176.png)\n\n---\n\n## 📚 App 名称国际化\n\n创建 `InfoPlist.strings` 文件，点击右侧 `localize`，然后选择对应的语言。\n\n接着在文件中设置对应语言的 App 名称:\n\n```swift\nCFBundleName=\"Your App Name\"\n```",
      "data": {
        "title": "🎃 iOS Swift 项目实现多语言支持",
        "date": "2023-04-16 19:11:43",
        "tags": [
          "Swift",
          "iOS"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/ios-swift-xiang-mu-shi-xian-duo-yu-yan-zhi-chi.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "ios-swift-xiang-mu-shi-xian-duo-yu-yan-zhi-chi"
    },
    {
      "content": "\n> \"The development of full artificial intelligence could spell the end of the human race.\"   - Stephen Hawking\n\n---\n\n因为 ChatGPT 的原因，最近各种 AI 概念真的很火 XD。\n\n自己手头也正好有一台主机闲置，正好自建一个 StableDiffusion 来玩。\n\n这篇文章可能会持续更新 (如果我有时间)，我会在这篇文章中分享整个过程。\n\n---\n\n## 💭 部署背景\n\n因为平时会玩游戏，所以主机环境为 Windows10。\n\n加上硬盘也不大，懒得去搞 Ubuntu 双系统了。所以目前的想法是直接部署一套 WebUI，\n\n开放给同局域网下的 Mac 使用。这样主机就可以开着不管，所有操作都使用 Mac 完成。\n\n跑完后再去 Windows 下提取跑出来的图片。\n\n> 顺带一提，Windows 和 Mac 文件互通确实是件很头疼的事情...\n\n---\n\n## 🪴 主机配置\n\n- CPU: **Intel 12700KF**\n\n- 内存: **32G 双通道 DDR4**\n\n- 显卡：**RTX 3080 10G DDR6X**\n\n- ... (更多的就懒得写了，和 SD 基本也没太多关系)\n\n> 如果显卡显存低于 4G 可能会比较吃力 🫠，建议使用 [Google Colab](https://colab.research.google.com/) 这类云服务来跑渲染。\n\n---\n\n## 🍻 部署 StableDiffusion\n\n因为我真的很讨厌 Windows 下的编程环境，一点都不想在 Windows 下折腾。\n\n所以我直接用了比较成熟的 WebUI： [AUTOMATIC1111/stable-diffusion-webui](https://github.com/AUTOMATIC1111/stable-diffusion-webui)。\n\n当然，如果喜欢折腾的话也可以自己去 Clone [源码](https://github.com/Stability-AI/stablediffusion)编译用 Shell 跑。\n\n整个安装过程还是比较简单的，跟着 README 走即可。\n\n1. 安装 Python 和 Git. (Python 要记得加 Path)。\n\n2. Clone WebUI 到本地 `git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git`\n\n3. 打开 Clone 下来的项目文件夹，双击 `webui-user.bat` 启动。\n\n第一次运行需要安装对应的依赖和库，一般需要等 20 ~ 30 分钟。同时，你需要科学上网。\n\n等待安装完成启动后，访问 `127.0.0.1.7860` 即可使用。\n\n---\n\n## 🍓 常见问题\n\n遇到问题可以先查阅官方提供的 [Wiki](https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Troubleshooting)。\n\n### 1. 主机服务开放局域网访问\n\n为了使局域网内的电脑可以访问本机服务，你可以做以下设置:\n\n1. **关闭 Windows 防火墙**\n   \n   在 `设置` - `Windows 安全中心` - `防火墙和网络保护` 中关闭你的防火墙。\n    \n    > 当然，这种方法其实是有一定风险的，你也可以使用 [添加入站规则](https://www.jianshu.com/p/642be9f0a597)的方式\n\n\n2. **修改 StableDiffusionWebUI 启动参数**\n   \n   使用文本编辑工具打开 WebUI 目录下的 `webui-user.bat`，添加如下参数：\n   \n   ```\n   set COMMANDLINE_ARGS=--listen --share --no-gradio-queue --enable-insecure-extension-access\n   ```\n   \n   > 前两个参数是为了局域网可以正常访问服务，后两个参数解决非本机无法安装拓展的问题。\n\n\n\n### 2. WebUI 用户界面的汉化\n\n虽然全是名词，但是汉化成中文还是用起来会方便一些。\n\n直接安装这个 Extension 即可完成汉化：[VinsonLaro/stable-diffusion-webui-chinese](https://github.com/VinsonLaro/stable-diffusion-webui-chinese)\n\n> 顺带一提，使用 Chinese-English 会更好一些，有些名词翻译后还是比较迷惑的。\n\n\n\n\n\n\n",
      "data": {
        "title": "🧶 自建 StableDiffusion 流程分享",
        "date": "2023-04-15 12:34:04",
        "tags": [
          "StableDiffusion",
          "AI"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/zi-jian-stablediffusion-liu-cheng-fen-xiang.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "zi-jian-stablediffusion-liu-cheng-fen-xiang"
    },
    {
      "content": "\n> 本文章所实现内容仅做学习分享所用，本人不承担任何责任，请勿将相关信息用于非法用途。\n\n# 🫠 准备工作\n\n首先，安装 [GuzzleHttp](https://github.com/guzzle/guzzle) 网络请求 Package。\n\n```shell\ncomposer require guzzlehttp/guzzle\n```\n\n---\n\n# 💭 绕过 Cloudflare\n\nValorant Api 受到 Cloudflare 防护，以及 Riot 也加了一层验证。\n\n绕过 Cloudflare 的核心原理是使用 `Ciphers` 伪造 SSL，具体请求方式如下：\n\n```php\n /**\n* 用于绕过 Riot 防护的请求头\n*\n* @var string[] 请求头\n*/\n$headers = [\n    'Content-Type'          => 'application/json',\n    'User-Agent'            => 'RiotClient/63.0.5.4887690.4789131 rso-auth (Windows; 10;;Professional, x64)',\n    'X-Riot-ClientPlatform' => 'ew0KCSJwbGF0Zm9ybVR5cGUiOiAiUEMiLA0KCSJwbGF0Zm9ybU9TIjogIldpbmRvd3MiLA0KCSJwbGF0Zm9ybU9TVmVyc2lvbiI6ICIxMC4wLjE5MDQyLjEuMjU2LjY0Yml0IiwNCgkicGxhdGZvcm1DaGlwc2V0IjogIlVua25vd24iDQp9',\n];\n\n/**\n* 请求中绕过 Cloudflare 所需要的 SSL 证书加密方式\n*\n* @var string[] 用于请求的参数\n*/\n$ciphers13 = [\n    'TLS_CHACHA20_POLY1305_SHA256',\n    'TLS_AES_128_GCM_SHA256',\n    'TLS_AES_256_GCM_SHA384',\n];\n\n/**\n* 请求中绕过 Cloudflare 所需要的 SSL 证书加密方式\n*\n* @var string[] 用于请求的参数\n*/\n$ciphers = [\n    'ECDHE-ECDSA-CHACHA20-POLY1305',\n    'ECDHE-RSA-CHACHA20-POLY1305',\n    'ECDHE-ECDSA-AES128-GCM-SHA256',\n    'ECDHE-RSA-AES128-GCM-SHA256',\n    'ECDHE-ECDSA-AES256-GCM-SHA384',\n    'ECDHE-RSA-AES256-GCM-SHA384',\n    'ECDHE-ECDSA-AES128-SHA',\n    'ECDHE-RSA-AES128-SHA',\n    'ECDHE-ECDSA-AES256-SHA',\n    'ECDHE-RSA-AES256-SHA',\n    'AES128-GCM-SHA256',\n    'AES256-GCM-SHA384',\n    'AES128-SHA',\n    'AES256-SHA',\n    'DES-CBC3-SHA',  # most likely not available\n];\n\n// 实例化 HttpClient\n $client = new \\GuzzleHttp\\Client([\n    'cookies' => true, // 开启 Cookie，保存 Riot 返回的 Token\n    'curl'    => [\n        CURLOPT_SSLVERSION      => CURL_SSLVERSION_TLSv1_3,\n        CURLOPT_SSL_CIPHER_LIST => implode(':', $ciphers),\n        CURLOPT_TLS13_CIPHERS   => implode(':', $ciphers13),\n    ],\n]);\n\n// 发送请求\n$response = $client->request('POST', 'https://auth.riotgames.com/api/v1/authorization', [\n    'json' => [\n        'client_id'             => 'riot-client',\n        'code_challenge'        => '',\n        'code_challenge_method' => '',\n        'acr_values'            => '',\n        'claims'                => '',\n        'nonce'                 => '69420',\n        'redirect_uri'          => 'http://localhost/redirect',\n        'response_type'         => 'token id_token',\n        'scope'                 => 'openid link ban lol_region',\n    ],\n]);\n\n// do something\n```\n\n---\n\n# 👨‍💻 Reference Links\n\n- [techchrism/valorant-api-docs](https://github.com/techchrism/valorant-api-docs)\n",
      "data": {
        "title": "🪴 绕过 Cloudflare 访问 Valorant Api",
        "date": "2023-04-07 02:46:08",
        "tags": [
          "SSL",
          "Laravel",
          "GuzzleHttp",
          "Proxy",
          "Curl"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/laravel-rao-guo-cloudflare-fang-huo-qiang-fang-wen-valorant-nei-bu-api.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "laravel-rao-guo-cloudflare-fang-huo-qiang-fang-wen-valorant-nei-bu-api"
    },
    {
      "content": "\n# 🪴 全局加载字体\n\n## 1. 导入字体文件\n\n准备好要使用的字体文件，并且将它导入至你的 XCode Project 中。\n\n> Tips：一定要勾选 `Copy items if needed` ，不勾选的话只会进行位置引用。\n\n![](https://seaony.github.io/post-images/1679953001044.png)\n\n---\n\n## 2. 修改 Info.plist\n\n打开你的 `Info.plist` 文件，新增一项：`Fonts provided by application`。\n\n对应的值即为你的字体文件的名称 (不需要带 Group 前缀，需要带文件后缀)。\n\n![](https://seaony.github.io/post-images/1679953202754.png)\n\n---\n\n## 3. 添加资源文件\n\n确保你的字体文件已添加至 `TARGETS` - `Build Phases` - `Copy Bundle Resources` 中。\n\n> 一般导入字体文件后会自动添加，但也会有意外 :-)\n\n![](https://seaony.github.io/post-images/1679953445072.png)\n\n---\n\n## 4. 确认导入成功\n\n运行这段代码即可打印出所有可用字体，检查是否导入成功。\n\n```swift\nfor fontFamily in UIFont.familyNames {\n    print(fontFamily)\n\n    for font in UIFont.fontNames(forFamilyName: fontFamily) {\n        print(fontFamily + \": \" + font)\n    }\n}\n```\n\n---\n\n# 🧐 覆盖默认字体\n\n如果你需要全局都显示某个字体，那么就需要这样设置。\n\n如果不这样做，那么你需要在每一个显示文本的地方都指定 `FontName`。\n\n> Tips：使用覆盖 UIFont 的方式设置全局字体会导致键盘等系统 UI 字体也被替换。\n\n## 1. 创建 UIFont 拓展\n\n在 `Extension` Group 下创建 `UIFontExtension` 文件拓展 UIFont 类。\n\n> 当然，你也可以放在别的位置，使用其他名称 🫠。\n\n```swift\nimport UIKit\n\n// MARK: - AppFontName\nstruct AppFontName {\n    static let italic = \"Montserrat-Medium\"\n    static let regular = \"Montserrat-Medium\"\n    static let semibold = \"Montserrat-SemiBold\"\n    static let bold = \"Montserrat-Bold\"\n    static let heavy = \"Montserrat-ExtraBold\"\n    static let black = \"Montserrat-Black\"\n}\n\n// MARK: - UIFontDescriptor.AttributeName\nextension UIFontDescriptor.AttributeName {\n\n    /// NSCTFontUIUsageAttribute\n    static let nsctFontUIUsage = UIFontDescriptor.AttributeName(rawValue: \"NSCTFontUIUsageAttribute\")\n\n}\n\n/// 字体扩展\nextension UIFont {\n\n    /// 是否已经替换过\n    static var isOverrided: Bool = false\n\n    // 重写系统字体\n    @objc class func mySystemFont(ofSize size: CGFloat, weight: UIFont.Weight) -> UIFont {\n        switch weight {\n        case .ultraLight, .thin, .light, .regular, .medium:\n            return UIFont(name: AppFontName.regular, size: size)!\n        case .semibold:\n            return UIFont(name: AppFontName.semibold, size: size)!\n        case .bold:\n            return UIFont(name: AppFontName.bold, size: size)!\n        case .heavy:\n            return UIFont(name: AppFontName.heavy, size: size)!\n        case .black:\n            return UIFont(name: AppFontName.black, size: size)!\n        default:\n            return UIFont(name: AppFontName.regular, size: size)!\n        }\n    }\n\n    // 重写粗体字体\n    @objc class func myBoldSystemFont(ofSize size: CGFloat) -> UIFont {\n        return UIFont(name: AppFontName.bold, size: size)!\n    }\n\n    // 重写斜体字体\n    @objc class func myItalicSystemFont(ofSize size: CGFloat) -> UIFont {\n        return UIFont(name: AppFontName.italic, size: size)!\n    }\n\n    // 重写字体的编码方法\n    @objc convenience init(myCoder aDecoder: NSCoder) {\n        guard\n                let fontDescriptor = aDecoder.decodeObject(forKey: \"UIFontDescriptor\") as? UIFontDescriptor,\n                let fontAttribute = fontDescriptor.fontAttributes[.nsctFontUIUsage] as? String\n        else {\n            self.init(myCoder: aDecoder)\n            return\n        }\n        var fontName = \"\"\n        switch fontAttribute {\n        case \"CTFontRegularUsage\":\n            fontName = AppFontName.regular\n        case \"CTFontEmphasizedUsage\", \"CTFontBoldUsage\":\n            fontName = AppFontName.bold\n        case \"CTFontObliqueUsage\":\n            fontName = AppFontName.italic\n        default:\n            fontName = AppFontName.regular\n        }\n        self.init(name: fontName, size: fontDescriptor.pointSize)!\n    }\n\n    /// 替换系统字体\n    class func overrideInitialize() {\n\n        // 避免 method swizzling 运行两次\n        guard self == UIFont.self, !isOverrided else {\n            return\n        }\n\n        // 避免 method swizzling 运行两次并恢复到原始初始化函数\n        isOverrided = true\n\n        // 替换系统字体\n        if let systemFontMethod = class_getClassMethod(self, #selector(systemFont(ofSize:weight:))),\n           let mySystemFontMethod = class_getClassMethod(self, #selector(mySystemFont(ofSize:weight:))) {\n            method_exchangeImplementations(systemFontMethod, mySystemFontMethod)\n        }\n\n        // 替换粗体字体\n        if let boldSystemFontMethod = class_getClassMethod(self, #selector(boldSystemFont(ofSize:))),\n           let myBoldSystemFontMethod = class_getClassMethod(self, #selector(myBoldSystemFont(ofSize:))) {\n            method_exchangeImplementations(boldSystemFontMethod, myBoldSystemFontMethod)\n        }\n\n        // 替换斜体字体\n        if let italicSystemFontMethod = class_getClassMethod(self, #selector(italicSystemFont(ofSize:))),\n           let myItalicSystemFontMethod = class_getClassMethod(self, #selector(myItalicSystemFont(ofSize:))) {\n            method_exchangeImplementations(italicSystemFontMethod, myItalicSystemFontMethod)\n        }\n\n        // Trick to get over the lack of UIFont.init(coder:))\n        if let initCoderMethod = class_getInstanceMethod(self, #selector(UIFontDescriptor.init(coder:))),\n           let myInitCoderMethod = class_getInstanceMethod(self, #selector(UIFont.init(myCoder:))) {\n            method_exchangeImplementations(initCoderMethod, myInitCoderMethod)\n        }\n    }\n}\n```\n\n---\n\n## 2. 覆盖初始化方法\n\n在你的 `AppDelegate` 文件中注册如下方法，覆盖 UIFont 初始化。\n\n```swift\noverride init() {\n    super.init()\n    UIFont.overrideInitialize()\n}\n```\n\n---\n\n# 🫠 Reference Links\n\n- [Set default custom font for entire app — Swift 5](https://medium.com/fabcoding/set-default-custom-font-for-entire-app-swift-5-55709e36e6f3)\n\n- [Setting up custom font style for Text, Labels and Buttons globally in iOS Application — iOS Swift](https://medium.com/@arunvaishy1007/setting-up-custom-font-style-for-text-labels-and-buttons-globally-in-ios-application-ios-swift-17b08317c026)\n\n\n",
      "data": {
        "title": "👨‍💻 iOS 项目中使用自定义字体",
        "date": "2023-03-28 05:33:25",
        "tags": [
          "Swift",
          "iOS"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/ios-xiang-mu-zhong-dao-ru-zi-ding-yi-zi-ti.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "ios-xiang-mu-zhong-dao-ru-zi-ding-yi-zi-ti"
    },
    {
      "content": "\n# 🧐 1. 移除 Storyboard\n\n没什么好说的，既然是纯代码布局，那么 Storyboard 文件就不需要了。\n\n```shell\nrm ./Main.storyboard\n```\n\n---\n\n# 👨‍💻 2. 修改 Main Interface\n\n因为 Xcode 版本更新，不同的版本会有不同的处理方案。\n\n-  Xcode Version < **14.0**\n\n    清空 `General` - `Deployment Info` - `Main Interface`。\n\n-  Xcode Version >= **14.0**\n\n    清空 `Build Setting` - `UIKit Main Storyboard File Base Name`。\n\n\n---\n\n# 🪴 3. 设置默认 View\n\n在你的 `AppDelegate.swift` - `application` 中添加如下代码。\n\n```swift\n// 设置默认显示的界面\nlet controller = YourDefaultViewController()\n        \nself.window = UIWindow(frame: UIScreen.main.bounds)\nwindow!.rootViewController = UINavigationController(rootViewController: controller)\nwindow?.makeKeyAndVisible()\n```",
      "data": {
        "title": "🪴 Xcode 中创建纯代码布局项目",
        "date": "2023-03-23 00:03:28",
        "tags": [
          "Swift"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/hello-gridea.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "hello-gridea"
    },
    {
      "content": "\n<!-- more -->\n\n> We used to look up at the sky and wonder at our place in the stars, now we just look down and worry about our place in the dirt. <div style=\"text-align: right;\">- 《Interstellar》</div>\n\n<!-- more -->\n\n\n\n## 🏠 Who am I?\n\n\n---\n\n## ⚒️ Digital Nomad\n\n> 如果有一天，我们终将会被淘汰，那么我希望淘汰我的是自己。或者说，以另一种方式存在的另一个 “我” 🫠。可能这一天很遥远，也可能，它就在明天。\n\n#### 👨‍💻 Development:\n\n- [JetBrains](https://www.jetbrains.com/) (The best IDE in the world 😻)\n\n- [Hyper](https://hyper.is/) (A terminal built on web technologies. 🫠)\n\n- [TablePlus](https://tableplus.com/) (Database management made easy 🍭)\n\n- [PHP Monitor](https://phpmon.app/) (Monitor and manage your PHP installations\nwith ease. 🧐)\n\n#### ⏳ Save Time:\n\n- [Raycast](https://www.raycast.com/) (Supercharged productivity 🌈)\n\n- [Things3](https://culturedcode.com/things/) (Simply Powerful，and Beautiful 🌱)\n\n- [1Password](https://1password.com/zh-cn) (The world’s most-loved password manager 👻)\n\n#### 🍯 Other Tools\n\n- [ClashX](https://github.com/yichengchen/clashX) (Over this wall 🍂)\n\n- [IINA](https://cleanshot.com/)  (We always have something to watch.)\n\n- [CleanShotX](https://cleanshot.com/)  (Capture your Mac’s screen like a pro. 😲)\n\n\n\n#### 💭 I'm Alive\n\n- [RunCat](https://kyome.io/runcat/index.html?lang=en) (Cat living in the menubar. 🐈)\n\n---\n\n## 🧶 如果你也喜欢玩游戏\n\n- [《英雄联盟》](https://lol.qq.com/main.shtml)\n  \n    玩的时间最久的游戏。可能对于我们这代人来说，联盟就像是陪着我们长大的一样。直到现在，虽然已经没有再想去玩的欲望了，但是依旧记得它所承载的青春和回忆。\n\n- [《死亡搁浅：导演剪辑版》](https://www.playstation.com/en-hk/games/death-stranding/)\n  \n    买了 PS 后白金的的第一个游戏。整个游戏过程像是做了一个很长的梦，直至醒来。可能，再难看到第二个带有如此强烈个人情感色彩的作品了。\n\n- [《Valorant》](https://playvalorant.com/) (ING)\n\n    极致的爆头艺术，Riot 的作品还是很棒的。\n\n---\n\n## 🍯 我正在\n\n- **学习日语**\n    \n    虽然看了很多番，但是对于日语还是一知半解。今年的目标是考下 N4，加油~\n\n- **开发 《Valor》**\n  \n    Valor 是一个基于 Valorant 内部 API 的游戏助手，目前正在开发 iOS 版本。\n\n- **减脂增肌**\n\n    大概是死宅的每日循环，躺平几个月之后就得来一次，今年的目标是减到 120。\n\n---\n\n## 🫠 和我聊聊\n\n\n- **Wechat (Base64)**：Y2FsaWJ1b3Jz\n\n- **Email (Base64)**：`c2Vhb255QG91dGxvb2suY29t`\n\n\n",
      "data": {
        "title": "💭 Code in Life, Think in Death。",
        "date": "2019-01-25 19:09:48",
        "tags": [],
        "published": true,
        "hideInList": true,
        "feature": "/post-images/about.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "about"
    }
  ],
  "tags": [
    {
      "name": "日本語",
      "slug": "McZW1oVKS",
      "used": true
    },
    {
      "name": "StableDiffusion",
      "slug": "LgPKkP_zG",
      "used": true
    },
    {
      "name": "AI",
      "slug": "tULiQstXBj",
      "used": true
    },
    {
      "name": "SSL",
      "slug": "jThqpHLAD",
      "used": true
    },
    {
      "name": "Laravel",
      "slug": "PT-GB7dPys",
      "used": true
    },
    {
      "name": "GuzzleHttp",
      "slug": "TFliXGNH_M",
      "used": true
    },
    {
      "name": "Proxy",
      "slug": "_jJnooo1rL",
      "used": true
    },
    {
      "name": "Curl",
      "slug": "ulqMbRj3y4",
      "used": true
    },
    {
      "name": "iOS",
      "slug": "KiEwulagm",
      "used": true
    },
    {
      "name": "Swift",
      "slug": "UTRWV5Qzl",
      "used": true
    },
    {
      "name": "Gridea",
      "slug": "6r9fOKFTW",
      "used": false
    }
  ],
  "menus": [
    {
      "link": "/",
      "name": "Home",
      "openType": "Internal"
    },
    {
      "link": "/archives",
      "name": "Archives",
      "openType": "Internal"
    },
    {
      "link": "/tags",
      "name": "Tags",
      "openType": "Internal"
    },
    {
      "link": "/post/about",
      "name": "About",
      "openType": "Internal"
    }
  ]
}